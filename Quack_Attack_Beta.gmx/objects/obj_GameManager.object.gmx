<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_BulletProjectile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draggingTower</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>numberOfDescriptions</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>newDescriptionTop</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>noone</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>newDescription</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>noone</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selectedTowerId</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>noone</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>newTower = instance_create(-600, -600, obj_SplinterCell);
newTower.visible = 0;
newTower = instance_create(-600, -600, obj_Fighter);
newTower.visible = 0;
newTower = instance_create(-600, -600, obj_Machete);
newTower.visible = 0;
newTower = instance_create(-600, -600, obj_SnowBall);
newTower.visible = 0;
newTower = instance_create(-600, -600, obj_Archer);
newTower.visible = 0;
newTower = instance_create(-600, -600, obj_Jebediah);
newTower.visible = 0;
newTower = instance_create(-600, -600, obj_Peashooter);
newTower.visible = 0;
newTower = instance_create(-600, -600, obj_DoublePistol);
newTower.visible = 0;
newTower = instance_create(-600, -600, obj_SherlockHolmes);
newTower.visible = 0;
newTower = instance_create(-600, -600, obj_Cannon);
newTower.visible = 0;
// How smooth is the edge of the tower's range
draw_set_circle_precision(64);
// Antialiasing (prevent the towers look pixelated when they rotate) and vsync off so room_speed can go over 60
display_reset(8, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Display other cursor when it's over a tower, menuTower, or button
if (place_meeting(mouse_x, mouse_y, obj_ButtonParent) &amp;&amp; draggingTower == 0){
    window_set_cursor(cr_handpoint);
}
else if (!place_meeting(mouse_x, mouse_y, obj_ButtonParent) &amp;&amp; draggingTower == 0){
    window_set_cursor(cr_default);
}

if (place_meeting(mouse_x, mouse_y, obj_RestartButton) &amp;&amp; draggingTower == 0){
    with(obj_RestartButton){
        image_blend = c_silver;
    }
}
else if (!place_meeting(mouse_x, mouse_y, obj_RestartButton) &amp;&amp; draggingTower == 0){
    with(obj_RestartButton){
        image_blend = c_white;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_EnemiesParent">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_Lives.currentLives</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>obj_Lives.currentLives - other.livesSubtracted</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Destroy the tower being dragged if right mouse button is pressed
with (obj_DragTowerParent){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();
// Display the tower value while the mouse is over a menuTower, as well as its description
if (place_meeting(mouse_x, mouse_y, obj_MenuTowerParent) &amp;&amp; draggingTower == 0){
    menuTower = instance_position(mouse_x, mouse_y, obj_MenuTowerParent);
    draw_set_font(font_1);
    draw_set_colour(c_white);
    // Check if exists again because it gave errors otherwise
    if (menuTower != noone){
        draw_text(menuTower.x - 26, menuTower.y + 30, "$" + string(menuTower.buyValue));
        // Limit the number of descriptions as we dont want an object to be created every step
        if (numberOfDescriptions == 0){
            newDescription = instance_create(menuTower.x - menuTower.sprite_xoffset, menuTower.y, menuTower.towerDescription);
            numberOfDescriptions = 1;
        }
    }
}
// Do not display descriptions while dragging a tower either
else if (!place_meeting(mouse_x, mouse_y, obj_MenuTowerParent || draggingTower == 1)){
    if (newDescription != noone){
        with (newDescription){
            instance_destroy();
            other.numberOfDescriptions = 0;
        }
    }
}

// Buttons descriptions
if (place_meeting(mouse_x, mouse_y, obj_ButtonNextWave) &amp;&amp; draggingTower == 0 
 || place_meeting(mouse_x, mouse_y, obj_SellTower) &amp;&amp; draggingTower == 0
 || place_meeting(mouse_x, mouse_y, obj_UpgradeTower) &amp;&amp; draggingTower == 0){
    buttonId = instance_position(mouse_x, mouse_y, obj_ButtonParent);
    if (buttonId != noone){
        // Limit the number of descriptions as we dont want an object to be created every step
        if (numberOfDescriptions == 0){
            newDescriptionTop = instance_create(buttonId.x, buttonId.y + buttonId.sprite_yoffset, buttonId.buttonDescription);
            numberOfDescriptions = 1;
        }
    }
}
// Do not display descriptions while dragging a tower either
else if (!place_meeting(mouse_x, mouse_y, obj_ButtonNextWave) 
 || !place_meeting(mouse_x, mouse_y, obj_SellTower) 
 || !place_meeting(mouse_x, mouse_y, obj_UpgradeTower)
 || draggingTower == 1){
    if (newDescriptionTop != noone){
        with (newDescriptionTop){
            instance_destroy();
            other.numberOfDescriptions = 0;
        }
    }
}

// Display upgrade price
if (place_meeting(mouse_x, mouse_y, obj_UpgradeTower)){
    with (obj_TowersParent){
        if (selectedTower == 1 &amp;&amp; upgrade == 0){
            other.selectedTowerId = id;   
        }
    }
    if (selectedTowerId != noone &amp;&amp; selectedTowerId.upgrade == 0){
        draw_set_colour(c_white);
        draw_set_font(font_1);
        draw_text(selectedTowerId.x - 30, selectedTowerId.y - 10, "$" + string(selectedTowerId.upgradePrice));
    }
}
else if (!place_meeting(mouse_x, mouse_y, obj_UpgradeTower)){
    selectedTowerId = noone;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(obj_RestartButton)){
    instance_create(room_width/2, room_height/2, obj_RestartButton);
    instance_deactivate_all(true);
    instance_activate_object(obj_RestartButton);
}
else if (instance_exists(obj_RestartButton)){
    with (obj_RestartButton){
        instance_destroy();
    }
    instance_activate_all();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,4</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
